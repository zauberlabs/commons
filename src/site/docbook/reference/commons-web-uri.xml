<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="commons-web-uri" 
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
    <title>Commons Web Uri</title>
    <para>Commons Web Uri provides complete control over the site internal 
        references. This package provide several enhances to boost and improve page 
        performance of web applications as well as simplify their development. 
        These enhances aim to  simplify things as:
        
        <itemizedlist>
            <listitem>Centralize uri management</listitem>
            <listitem>Simplify concatenation/minimization of scripts or stylesheets</listitem>
            <listitem>Versionate uris</listitem>
            <listitem>Work with content delivery networks</listitem>
            <listitem>Simplify construction of relative uri paths</listitem>
        </itemizedlist>
        
    </para>
    <section xml:id="commons-web-uri-urifactory">
        <title>Building Links With UriFactory</title>
        <para>UriFactory build URIs dynamically, given a key and some optional arguments
        it returns an URI.</para>
        
        <section xml:id="commons-web-uri-urifactory-jsp">
            <title>Using UriFactory within JSPs</title>
            <para>There's UriJspFactory utility class which let you use UriFactories JSPs in 
            a very simple way. It uses by default RelativePathUriFactory, but 
            providing an UriFactory Spring bean with name SpringBeans.LINK_URIFACTORY_KEY, 
            will override the default UriFactory. Then inside your jsp you only have 
            to call buildUri method.</para>
            <section>
                <title>Example</title>
                <para>Begin using JspUriFunctions by including this taglib to your jsp:</para>
                <programlisting><![CDATA[<%@taglib prefix="uri" uri="http://labs.zauber.com.ar/commons/functions/uri" %>]]></programlisting>
                <para>To build a uri you should use the functions provided by the taglib
                as follow:</para>
                <programlisting><![CDATA[<a href="${uri:build0(pageContext, "/one/two/three")}}">link</a>]]></programlisting>
                <para>That will print out this wherever you write it:</para>
                <programlisting><![CDATA[<a href="www.example.com/context/path/one/two/three">link</a>]]></programlisting>
                <para>where "www.example.com/context/path/" is where you have deployed your webapp.</para>
            </section>
        </section>
        <section xml:id="commons-web-uri-implementations">
            <title>Available Implementations</title>
            <para>There are several implementations of this Interface and all of 
            them are intended to decorate another UriFactory. Here is a graph showing how
            it is intended to behave:</para>
            
            <imagedata fileref="./images/diagrama-commons-web-uri-600.jpg" 
                             align="center" valign="middle"/>
            
            <para>These artifacts are very useful to manage the links in a centralized way.
            You can manage the links of the webpage, mails and HTTP headers all from the same 
            place avoiding to have them all diseminated through the application.
            </para>
            <section xml:id="commons-web-uri-urifactory-expressionmap">
                <title>Configuring ExpressionMapUriFactory</title>
                <para>A very useful implementation of UriFactory is ExpressionMapUriFactory
                    where each uri has an unique key, these uris are simple expressions which are
                    evaluated by {@link ExpressionParser}. An known implementation of this is
                    {@link SpelExpressionParser}.
                </para>

                <para>
                    These expressions ressemble Spring UriTemplate. Here are some examples with
                    SpEl:
                    <itemizedlist>
                        <listitem><programlisting>/users/{#root[0]}/inbox</programlisting></listitem>
                        <listitem><programlisting>/users/{#root[0]}/questions/{#root[1].id}</programlisting></listitem>
                        <listitem><programlisting>/users/{#root[0].username}/</programlisting></listitem>
                        <listitem><programlisting>/users/{encode(#root[1].question)}</programlisting></listitem>    
                    </itemizedlist>
                </para>

                <para>
                    The code beteween curly brackets is what actually gets evaluated. The variable 
                    <emphasis role="bold">#root</emphasis> refers to the array of arguments passed 
                    to the method UriFactory#buildUri .Furthermore there is an utility 
                    function inside the Parser called encode, which actually encodes the Uri.
                </para>
            </section>
            <section xml:id="commons-web-uri-urifactory-versionated">
                <title>Versionated Uri Factory</title>
                <para>Adding version numbers let you use far future expiration dates,
                this practice improves considerably the web page performance.</para>
                <para>This Implementation adds a predefined version identificator to
                    the uri. Let's see an example, applying buildUri to the following
                    key:
                </para>
                <programlisting>http://www.example.com/css/glossy.css</programlisting>
                <para>will result on this:</para>
                <programlisting>http://www.example.com/css/glossy.css?v=1.2</programlisting>
            </section>
        </section>
    </section>
    <section xml:id="commons-web-uri-assets">
        <title>Managing page resources with Assets</title>
        <section xml:id="commons-web-uri-why">
            <title>Increasing website performance</title>
            <para>It's well known that users spend most of their time waiting the page
                to load. So there are some good practices such as content delivery networks,
                code minimization and stylesheet concatenation which boost significantly
                the average load time. But some of this practices require to resolve uris
                dynamically, Assets is intended to solve this problem.
            </para>
        </section>
        <para>Assets is a collection of tools that let you manage the resources of your page. 
            It lets you manage the resources as sets, to later ofuscate, minimize,
            concatenate a bunch of css or javascript assets. Or even manage browser 
            dependent assets into differents groups.
        </para>
        <para>
            For such a task it defines the entity "Asset" which refers to a single resource. 
            Every Asset has a key which resolves the url using a UriFactory configured in the
            spring context. In addition assets have a property named set which let you group
            them. The assets are intended to be used inside jsp. Actually there are several tags
            to use them.(See Examples)
        </para>
        <para> 
            In order to start using them it is necessary to configure an 
            AssetRepository and a UriFactory as spring beans (AssetRepository MUST be
            request scoped). The AssetRepository must be named as 
            SpringBeans.REPOSITORY_KEY defines. And the UriFactory must be named as
            SpringBeans.ASSET_URIFACTORY_KEY defines.
        </para>
        <para>The workflow is the following, each asset is stored in the repository 
            grouped by set and indetified by its key. So depends on the repository 
            what will be printed out when the assets are recalled. The repository 
            could balance requests giving URLs to differents servers.
        </para>
        <para>
            Now, let's see Assets in action:
            There are several usefull tags, but we can divide them into two groups, 
            includable assets tags assets that are suitable to be preprocessed, and 
            printable asset tags that are tags that will print content to the jsp.
            Among includable tags we can name css and javscript tags, these assets are the
            ones which actually get grouped by sets, by default all of them belong to a 
            default set. On the other hand there printable tags are such as Image tag or 
            Print tag . Print tag works together with includable tags. When we name the
            print tag along a set, it prints out the corresponging assets to that set 
            defined before the use of the print tag. If no set is provided it will recall 
            the default set.
        </para>
        <para>Something very usefull is to include a Header before any print tag, so 
            the assets declared on the header gets printed.
        </para>
        <section xml:id="commons-web-uri-assets-usage-general">
            <title>Typical use inside a jsp</title>
            <para>first of all we must include the tag lib. (we will be using a 
                SimpleAssetRepository and a RelativePathUriFactory)
            </para>
            <programlisting><![CDATA[<%@ taglib prefix="assets" uri="http://labs.zauber.com.ar/commons/tags/assets" %>]]></programlisting>
            <para>for each resource we want to include we name it by it key.</para>
            <programlisting><![CDATA[<assets:javascript key="/_js/lib/jquery-1.4.2.js"/>
<assets:css key="/_css/cute.css" media="text/stylesheet"/>]]></programlisting>
            <para>Later if we put this</para>
            <programlisting><![CDATA[<assets:print/>]]></programlisting>
            <para>The output generated will be:</para>
            <programlisting><![CDATA[<script type="text/javascript" 
            src="../../../_js/lib/jquery-1.4.2.js"></script>
<link rel="stylesheet" type="text/css\" href="../../../_css/cute.css"
            "media="text/stylesheet" />]]></programlisting>
        </section>
        <section xml:id="commons-web-uri-assets-usage-set">
            <title>Grouping assets into sets</title>
            <para>To group assets into groups we set each asset with a set, and then 
            recall that set in the print tag.</para>
            <programlisting><![CDATA[<assets:css set="ie8" key="/_css/lte-ie8.css" 
            media="screen"/>
<assets:css set="ie6" key="/_css/ie6.css" media="screen" />
<!--[if lte IE 8]>
    <assets:print set="ie8" />
<![endif]-->]]></programlisting>
            <para>As a result of using the print tag with set property "ie8" we will 
            obtain this:</para>
            <programlisting><![CDATA[<!--[if lte IE 8]>
    <link rel="stylesheet" type="text/css\" href="../../../_css/lte-ie8.css"  
        "media="screen" />
<![endif]-->]]></programlisting>
        </section>
        <section xml:id="commons-web-uri-assets-usage-images">
            <title>Inserting images</title>
            <para>Using asset:image to include an image referenced by a key</para>
            <programlisting><![CDATA[<body>
    <asset:image key="/res/img/imagen1.jpg" />
</body>]]></programlisting>
            <para>will result on this</para>
            <programlisting><![CDATA[<body>
    <img src="../../../res/img/imagen1.jpg">
</body>]]></programlisting>
        </section>
    </section>
</chapter>
