<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter xml:id="commons-web-uri"
         xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Commons Web Uri</title>

  <para>Commons Web Uri provides complete control over the site internal
  references. This package provide several enhances to boost and improve page
  performance of web applications as well as simplify their development. These
  enhances aim to simplify things as: <itemizedlist>
      <listitem>
        <para>Centralize uri management</para>
      </listitem>

      <listitem>
        <para>Simplify concatenation/minimization of scripts or
        stylesheets</para>
      </listitem>

      <listitem>
        <para>Versionate uris</para>
      </listitem>

      <listitem>
        <para>Work with content delivery networks</para>
      </listitem>

      <listitem>
        <para>Simplify construction of relative uri paths</para>
      </listitem>
    </itemizedlist></para>

  <section xml:id="commons-web-uri-urifactory">
    <title>Building Links With UriFactory</title>

    <para><code>UriFactory</code> build URIs dynamically, given a key and some optional
    arguments it returns an URI or an URI reference.</para>

    <programlisting language="Java">
public interface UriFactory {
  String buildUri(final String uriKey, final Object... expArgs);
}</programlisting>

    <section xml:id="commons-web-uri-urifactory-jsp">
      <title>Using <code>UriFactory</code> within JSPs</title>

      <para>There's <code>UriJspFactory</code> utility class which let you use
      <code>UriFactory</code> inside your JSPs in a very simple way. It uses by default
      <code>RelativePathUriFactory</code>, but providing an
      <code>UriFactory</code> Spring bean with name
      <code>linksUriFactory</code> (Java constant
      <code>SpringBeans.LINK_URIFACTORY_KEY</code>), will override the default
      <code>UriFactory</code>. Then inside your jsp you only have to call
      build method.</para>

      <section>
        <title>Example</title>

        <para>Begin using JspUriFunctions by including this taglib to your
        jsp:</para>

        <programlisting>&lt;%@taglib prefix="uri" uri="http://labs.zauber.com.ar/commons/functions/uri" %&gt;</programlisting>

        <para>To build a uri you should use the functions provided by the
        taglib as follow:</para>

        <programlisting>&lt;a href="${uri:build0(pageContext, "/one/two/three")}"&gt;link&lt;/a&gt;</programlisting>

        <para>That will print out this wherever you write it:</para>

        <programlisting>&lt;a href="../../one/two/three"&gt;link&lt;/a&gt;</programlisting>

        <para>or something like</para>
        <programlisting>&lt;a href="http://www.example.com/context/path/one/two/three"&gt;link&lt;/a&gt;</programlisting>

        <para>depending on the configuration.</para>
      </section>
    </section>

    <section xml:id="commons-web-uri-implementations">
      <title>Available Implementations</title>

      <para>There are several implementations of this Interface and all of
      them are intended to decorate another <code>UriFactory</code>. Here is a graph
      showing how it is intended to behave:</para>

      <para><inlinemediaobject>
          <imageobject>
            <imagedata align="justify"
                       fileref="./images/diagrama-commons-web-uri-600.jpg"
                       scalefit="1" valign="middle" width="15cm"></imagedata>
          </imageobject>
        </inlinemediaobject></para>

      <para>These artifacts are very useful to manage the links in a
      centralized way. You can manage the links of the webpage, mails and HTTP
      headers all from the same place avoiding to have them all diseminated
      through the application.</para>

      <section xml:id="commons-web-uri-urifactory-expressionmap">
        <title>Configuring ExpressionMapUriFactory</title>

        <para>A very useful implementation of <code>UriFactory</code> is
        <code>ExpressionMapUriFactory</code> where each uri has an unique key,
        these uris are simple expressions which are evaluated by
        <code>ExpressionParser</code>. An known implementation of this is
        <code>SpelExpressionParser</code>.</para>

        <para>These expressions ressemble Spring class
        <code>UriTemplate</code>. Here are some examples with
        <code>SpEl</code>: <itemizedlist>
            <listitem>
              <programlisting>/users/{#root[0]}/inbox</programlisting>
            </listitem>

            <listitem>
              <programlisting>/users/{#root[0]}/questions/{#root[1].id}</programlisting>
            </listitem>

            <listitem>
              <programlisting>/users/{#root[0].username}/</programlisting>
            </listitem>

            <listitem>
              <programlisting>/users/{encode(#root[1].question)}</programlisting>
            </listitem>
          </itemizedlist></para>

        <para>The code beteween curly brackets is what actually gets
        evaluated. The variable <emphasis role="bold">#root</emphasis> refers
        to the array of arguments passed to the method
        <code>UriFactory#buildUri</code> .Furthermore there is an utility
        function inside the arser called <code>encode</code>, which actually
        encodes the Uri.</para>
      </section>

      <section xml:id="commons-web-uri-urifactory-general-use">
        <title>Common use UriFactories</title>

        <informaltable frame="hsides">
          <tgroup cols="4">
            <colspec align="left" />
            <thead>
              <row>
                <entry align="center">Implementation</entry>

                <entry align="left">Description</entry>

                <entry align="left">Input</entry>

                <entry align="left">Output</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>IdentityUriFactory</code></entry>

                <entry>Do nothing, just return the key received.</entry>

                <entry><programlisting>/example/</programlisting></entry>

                <entry><programlisting>/example/</programlisting></entry>
              </row>

              <row>
                <entry><code>PrefixUriFactory</code></entry>

                <entry>Given an key, it returns the key processed by its
                callback, then it prepends a prefix previously
                configured.</entry>

                <entry><programlisting>/example/</programlisting></entry>

                <entry><programlisting>http://www.myhost.com/
example/</programlisting></entry>
              </row>

              <row>
                <entry><code>AbsolutePathUriFactory</code></entry>

                <entry>If the uri is an absolute path does nothing, else it
                calls the urifactory callback and returns that</entry>

                <entry><programlisting>/example/</programlisting>
                <programlisting>http://www.example.com/example/</programlisting></entry>

                <entry><programlisting>http://www.myhost.com/
strange/url/example/</programlisting> <programlisting>http://www.example.com/
example/</programlisting></entry>
              </row>

              <row>
                <entry><code>VersionedUriFactory</code></entry>

                <entry>Given a key, it calls the UriFactory Callback and
                appends a version parameter to that uri.</entry>

                <entry><programlisting>/example/file.txt</programlisting></entry>

                <entry><programlisting>http://www.myhost.com/
example/file.txt?v=version_number</programlisting></entry>
              </row>

              <row>
                <entry><code>RelativePathUriFactory</code></entry>

                <entry>Given a path from the context path and a request,
                calculates the relative path to that place. Expects a request
                as the last argument.<code></code></entry>

                <entry><programlisting>/one/two/three/
(being at contextPath/foo/bar/)</programlisting></entry>

                <entry><programlisting>../../one/two/three/</programlisting></entry>
              </row>

              <row>
                <entry><code>ServletPathUriFactory</code></entry>

                <entry>Given a key, it prepends the contextPath of the current
                servlet</entry>

                <entry><programlisting>/one/two/three/</programlisting></entry>

                <entry><programlisting>/context/path/one/two/three</programlisting></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Note About <code>VersionedUriFactory</code>: Adding version
        numbers let you use far future expiration dates, this practice
        improves considerably the web page performance.</para>
      </section>

      <section xml:id="commons-web-uri-urifactory-factorybean">
        <title>Configuring UriFactories with
        ConfigurableUriFactoryFactoryBean</title>

        <para>There is a Factory Bean defined to simplify the UriFactories
        coniguration. The <code>ConfigurableUriFactoryFactoryBean</code> let's
        you configure from a base Urifactory (an user defined
        <code>UriFactory</code>) and on top of that add different commonly
        used implementations: <code>VersionatedUriFactory</code>,
        <code>PrefixUriFactory</code>, <code>AbsolutePathUriFactory</code> and
        <code>ServletPathUriFactory</code>. Note that
        <code>PrefixUriFactory</code> and <code>ServletPathUriFactory</code>
        in general are not compatible. Spring configuration Example:</para>

        <programlisting  language="XML" >&lt;bean class="ar.com.zauber.commons.web.uri.factory.ConfigurableUriFactoryFactoryBean"&gt;
    &lt;constructor-arg index="0"&gt;
        &lt;bean class="ar.com.zauber.commons.web.uri.factory.IdentityUriFactory"/&gt;
    &lt;/constructor-arg&gt;
    &lt;property name="absoluteUris" value="false"/&gt;
    &lt;property name="prefixKey" value="http://www.abc.com"/&gt;
    &lt;property name="version" value="1.0"/&gt;
&lt;/bean&gt;</programlisting>
      </section>
    </section>
  </section>

  <section xml:id="commons-web-uri-assets">
    <title>Managing page resources with Assets</title>

    <section xml:id="commons-web-uri-why">
      <title>Increasing website performance</title>

      <para>It's well known that users spend most of their time waiting the
      page to load. So there are some good practices such as content delivery
      networks, code minimization and stylesheet concatenation which boost
      significantly the average load time. But some of this practices require
      to resolve uris dynamically, Assets is intended to solve this
      problem.</para>

      <para>Assets is a collection of tools that let you manage the resources
      of your page. It lets you manage the resources as sets, to later
      ofuscate, minimize, concatenate a bunch of css or javascript assets. Or
      even manage browser dependent assets into differents groups.</para>

      <para>For such a task it defines the entity <code>Asset</code> which
      refers to a single resource. Every Asset has a key which resolves the
      url using a UriFactory configured in the spring context. In addition
      assets have a property named set which let you group them. The assets
      are intended to be used inside jsp. Actually there are several tags to
      use them.<link linkend="commons-web-uri-assets-usage-general">(See
      EXAMPLES)</link></para>

      <para>The workflow is the following, each asset is stored in the
      repository grouped by set and indetified by its key. So depends on the
      repository what will be printed out when the assets are recalled. The
      repository could balance requests giving URLs to differents
      servers.</para>
    </section>

    <section xml:id="commons-web-uri-assets-configuration">
      <title>Configuring Assets</title>

      <para>This module comes with a default configuration (assets are 
       linked using relative paths); but this can be overrided configuring
       a <code>AssetRepository</code> and a <code>UriFactory</code> as spring
      beans. The
      <code>AssetRepository</code> must be named as
      <code>requestAssetsRepository</code> (Java constant
      <code>SpringBeans.REPOSITORY_KEY</code>) and  MUST be request scoped. And the
      <code>UriFactory</code> must be named as
      <code>assetsUriFactory</code> (Java constant
      <code>SpringBeans.ASSET_URIFACTORY_KEY</code>) . Let's see an
      example:</para>

      <programlisting>&lt;bean id="requestAssetsRepository" scope="request" 
        class="ar.com.zauber.commons.web.uri.model.SimpleAssetsRepository" scope="request"/&gt;</programlisting>

      <para>Using <code>AssetRepository</code> and <code>UriFactory</code> in a clever way is how you
      can obtain great results from this utility. You can define different
      strategies to resolve URIs depending on your needs.</para>
    </section>

    <section xml:id="commons-web-uri-assets-usage-general">
      <title>Typical use inside a jsp</title>

      <para>There are several usefull tags, but we can divide them into two
      groups, includable assets tags assets that are suitable to be
      preprocessed, and printable asset tags that are tags that will print
      content to the jsp. Among includable tags we can name css and javscript
      tags, these assets are the ones which actually get grouped by sets, by
      default all of them belong to a default set. On the other hand there are
      printable tags are such as Image tag or Print tag . Print tag works
      together with includable tags. When we name the print tag along a set,
      it prints out the corresponging assets to that set defined before the
      use of the print tag. If no set is provided it will recall the default
      set.</para>

      <para>Something very usefull is to include a Header before any print
      tag, so the assets declared on the header gets printed.</para>

      <para>first of all we must include the tag lib. (we will be using a
      <code>SimpleAssetRepository</code> and a
      <code>RelativePathUriFactory</code>)</para>

      <programlisting>&lt;%@ taglib prefix="assets" uri="http://labs.zauber.com.ar/commons/tags/assets" %&gt;</programlisting>

      <para>for each resource we want to include we name it by it key.</para>

      <programlisting>&lt;assets:javascript key="/_js/lib/jquery-1.4.2.js"/&gt;
&lt;assets:css key="/_css/cute.css" media="text/stylesheet"/&gt;</programlisting>

      <para>Later if we put this</para>

      <programlisting>&lt;assets:print/&gt;</programlisting>

      <para>The output generated will be:</para>

      <programlisting>&lt;script type="text/javascript" 
            src="../../../_js/lib/jquery-1.4.2.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" type="text/css\" href="../../../_css/cute.css"
            "media="text/stylesheet" /&gt;</programlisting>
    </section>

    <section xml:id="commons-web-uri-assets-usage-set">
      <title>Grouping assets into sets</title>

      <para>To group assets into groups we set each asset with a set, and then
      recall that set in the print tag.</para>

      <programlisting>&lt;assets:css set="ie8" key="/_css/lte-ie8.css" 
            media="screen"/&gt;
&lt;assets:css set="ie6" key="/_css/ie6.css" media="screen" /&gt;
&lt;!--[if lte IE 8]&gt;
    &lt;assets:print set="ie8" /&gt;
&lt;![endif]--&gt;</programlisting>

      <para>As a result of using the print tag with set property "ie8" we will
      obtain this:</para>

      <programlisting>&lt;!--[if lte IE 8]&gt;
    &lt;link rel="stylesheet" type="text/css" href="../../../_css/lte-ie8.css"  
        "media="screen" /&gt;
&lt;![endif]--&gt;</programlisting>
    </section>

    <section xml:id="commons-web-uri-assets-usage-images">
      <title>Inserting images</title>

      <para>Using asset:image to include an image referenced by a key</para>

      <programlisting>&lt;body&gt;
    &lt;asset:image key="/res/img/imagen1.jpg" /&gt;
&lt;/body&gt;</programlisting>

      <para>will result on this</para>

      <programlisting>&lt;body&gt;
    &lt;img src="../../../res/img/imagen1.jpg"&gt;
&lt;/body&gt;</programlisting>
    </section>
  </section>
</chapter>
