<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter xml:id="commons-message" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Commons Message</title>
  <!--
    <para>Commons Message provides a notification system for a site.</para>
  -->
    <section xml:id="commons-message-overview">
        <title>Overview</title>
        
        <para><emphasis>Message</emphasis> aims to be an abstraction on the way 
        of notification. We can use <emphasis>Message</emphasis> in order to send 
        email, jabber or rich text notifications for instance. </para>
        <para>Also there are multiple 
        benefits in order to start using <emphasis>Message API</emphasis>:
        </para>
        <itemizedlist>
            <listitem><para><emphasis role="bold">Multicast
            </emphasis>: Send to multiple addresses a message.</para></listitem>            
            <listitem><para><emphasis role="bold">Auditoring
            </emphasis>: Store messages in a database.</para></listitem>
            <listitem><para><emphasis role="bold">Changing between implementations
            </emphasis>: Easy change between ways of notification.</para></listitem>
        </itemizedlist>          
 
    </section>
    
	<section xml:id="commons-message-core">    
        <title>Core Components</title>
        <para>We should begin to familiarize with its classes. 
        This image illustrates the main components</para>
        
        <para>
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="./images/message.png" 
                        align="center" valign="middle"/>
                </imageobject>
            </inlinemediaobject>
        </para>
        
        <para>In order to start sending notifications, we need to provide an 
        implementation of each of the following components.There are three mayor objects:</para>
        
        <section xml:id="commons-message-core-message">
            <title>Message</title>
            <para>Message abstraction. It has an asociated content, a subject and 
            a receiver (with type NotificationAddress).</para>
            <programlisting language="Java">public interface Message {

    /** @return the plain content of the message */
    String getContent();

    /** @return the from address */
    NotificationAddress getReplyToAddress();

    /** @return the subject of the message */
    String getSubject();
}</programlisting>
        </section>
        
        <section xml:id="commons-message-core-notify-address">
            <title>NotifyAddress</title>
            <para>Receiver asociated data.</para>
        </section>
        
        <section xml:id="commons-message-core-message-strategy">        
            <title>MessageStrategy</title>
            <para>Logic to send a message.</para>
        <programlisting>public interface NotificationStrategy {

    void execute(NotificationAddress[] addresses, Message message);

}</programlisting>
        </section>
    </section>
    
    <section xml:id="commons-message-implementations-mail-simple">
        <title>A simple email sending example</title>
        
        <para>In order to start sending email notifications, we need to define 
        some spring beans. Most parameters should be injected by a property 
        file. In case of email notifications, we need to define a sender logic class 
        <code>JavaMailSenderImpl</code> used by our strategy, 
        <code>SimpleEmailNotificationStrategy</code></para>
        
        <programlisting><![CDATA[
<!-- Message -->
<bean id="myStaticMail" 
    class="ar.com.zauber.commons.message.message.StringMessage">
    
    <!-- Message body -->
    <constructor-arg index="0" value="hello world!"/>
    <!-- Message subject -->
    <constructor-arg index="1" value="testing mail system"/>
    <!-- Sender email address -->
    <constructor-arg index="2" value="source.email@test.com"/>      
</bean>

<!-- Sender logic class -->
<bean id="externalMailSender" 
    class="org.springframework.mail.javamail.JavaMailSenderImpl">
    
    <property name="host" value="mail.host"/>
    <property name="defaultEncoding" value="mail.encoding"/>
    <property name="username" value="mail.username"/>
    <property name="password" value="mail.password"/>
    <property name="port" value="mail.port"/>
    <property name="javaMailProperties">
       <props>
            <!-- Generally both values are true -->
            <prop key="mail.smtp.starttls.enable">mail.tls</prop>
            <prop key="mail.smtp.auth">mail.auth</prop>
       </props>
    </property>
</bean> 

<!-- Notification strategy bean -->
<bean id="emailNotificationStrategy" 
    class="ar.com.zauber.commons.message.impl.mail.SimpleEmailNotificationStrategy">
    <!-- Sender logic class -->
    <constructor-arg index="0" ref="externalMailSender"/>
    <!-- Sender's domain -->
    <constructor-arg index="1" value="senderdomain.com"/>
    <!-- Sender's name -->
    <constructor-arg index="2" value="$name of the sender"/>
</bean>]]>
        </programlisting>
        
        <para>Up this point we are able to send an email using the bean 
        <code>emailNotificationStrategy</code> and calling <code>execute</code> 
        with the parameters:</para>
        
        <itemizedlist>
            <listitem><para><emphasis role="bold">Addresses</emphasis>: An array of 
            email addresses (using class <code>JavaMailEmailAddress</code>)</para></listitem>
            <listitem><para><emphasis role="bold">Message</emphasis>: A reference to 
            my message, in this case <code>myStaticMail</code>.</para></listitem>
        </itemizedlist>
        
        <para> Obviously this example is easy to understand but not practical. 
        We are sending an static message to a list of addresses. Things would 
        become more interesting if we define the structure of the email and using 
        parameters we prepopulate the message (templating).</para>         
    </section>  
    
    <section xml:id="commons-message-extending">    
        <title>Extending concepts</title>
        
        <para>Up to here we see the core classes of message and how to use them 
        in a simple example. In practice we will need a few extra:</para>

        <itemizedlist>
            <listitem>
                <para><emphasis role="bold">NotificationAddressFactory</emphasis>: 
                Generates addresses with associated string keys.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">MessageTemplate</emphasis>: Message 
                skeleton definition. Its basic structure and its methods to 
                render.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">MessageFactory</emphasis>: With a model 
                and view, constructs a new message. This is used with message 
                templates.</para>
            </listitem>
        </itemizedlist>

    </section>        
    
	<section xml:id="commons-message-implementations">    
        <title>Available implementations</title>
        
        <para>Now, we will introduce the implementations of <emphasis role="bold">
        Message</emphasis> and how to use them in a spring development 
        environment.</para>
        
        <section xml:id="commons-message-implementations-mail">
            <title>Email implementation</title>
            <section xml:id="commons-message-implementations-mail-warm">
                <title>Warming up</title>          
	            <para>Now, we know how to send emails but not in a practical way. 
	            We want to use message templating for sending personalized 
	            email notifications. For these kind of messages, we will define a velocity 
	            template for the email (to know more about velocity, click 
	            <link xlink:href="http://velocity.apache.org/engine/releases/velocity-1.5/user-guide.html">
	            here</link>). Like always, most parameters should be injected by 
	            a property file. We will be making use of the given 
	            <link linkend="commons-message-implementations-mail-simple">
	            Simple Email Example</link> and adding some more beans. On the following
                bean definitions, we can see the bean <code>MessageFactory</code>, 
                a way to construct new messages with 
                <code>VelocityMessageTemplate</code>.</para>
            
	            <programlisting><![CDATA[
	<!-- Mail Notification Address Factory -->
	<bean id="mailFactory" class="ar.com.zauber.commons.message.impl.mail.JavaMailEmailAddressFactory"/>
	
	<!-- Sender address -->
	<bean id="sourceAddressBean" 
	        class="ar.com.zauber.commons.message.impl.mail.JavaMailEmailAddress">
	    <constructor-arg value="sender@mail.com" />
	</bean>    
	        
	<!-- Mail Message Factory bean -->
	<bean name="messageFactory" class="ar.com.zauber.commons.message.message.templates.MessageTemplateMessageFactory">
		<description>Mail templates</description>
	    <constructor-arg index="0">
	        <map>
	           <!-- Template identification key -->
	           <entry key="template-key/mail">
			        <bean class="ar.com.zauber.commons.message.impl.message.VelocityMessageTemplate">
				        <constructor-arg index="0">
					        <bean class="ar.com.zauber.commons.dao.resources.ClasspathResource">
					            <!-- Velocity message template -->
						        <constructor-arg index="0" value="path/to/velocity/template.text.vm"/>
					        </bean>
				        </constructor-arg>
				        <!-- Email subject -->                            
				        <constructor-arg index="1" value="Email subject"/>
				        <!-- Reference to source address bean -->
				        <constructor-arg index="2" ref="sourceAddressBean"/>
			        </bean>
	            </entry>
	        </map>
		</constructor-arg>
	</bean>]]>
	           </programlisting>

		        <para>Now we have our message factory. In case you didn't notice, now we 
		        are able to make a typical personalized mail with the opening greeting 
		        <emphasis>"Dear $user"</emphasis> where <code>$user</code> will be 
		        prepopulated by the some value passed by our model. The model is a map where 
		        keys will be the variables to be prepopulated and its values will be the 
		        injected ones on the email.</para>
          
		        <para>Looking at the example, <code>template-key/mail</code> identifies 
		        specific mails with its template key and his asociated velocity template. 
		        By adding more entries to this map, we can have as many mails as we want. </para>
        
		        <para>To simplify the way we use message, we will use an instance of 
		        <code>MessageControllerCommand</code> and use its function: 
		        <code><![CDATA[sendMessage(Map<String, Object> model, NotificationAddress [] to)]]>
		        </code></para>
		        <programlisting><![CDATA[
<bean name="senderNotificationCommand" 
    class="ar.com.zauber.commons.message.util.MessageControllerCommand">
    
	<constructor-arg index="0" ref="emailNotificationStrategy"/>
	<constructor-arg index="1" ref="messageFactory"/>
	<constructor-arg index="2" value="template-key/mail"/>
</bean>]]>
		        </programlisting>            
                </section>
            <section xml:id="commons-message-implementations-mail-senders">
                <title>Email senders implementations</title>
                <para>Up to here, we are sending emails making use of 
                <code>JavaMailSenderImpl</code> from 
                <link linkend="commons-message-implementations-mail-simple">
                Simple Mail Example</link>.
                There are some useful implementations for other purposes:</para>
                                
                
		        <informaltable frame='hsides'>
		          <tgroup cols="2">
		            <thead>
		              <row>
		                <entry align="center">Implementation</entry>
		
		                <entry align="center">Comment</entry>
		              </row>
		            </thead>
		
		            <tbody>
		              <row>
		                <entry><code>NullMailSender</code></entry>
		                <entry>Dummy implementation. Useful to use at development time and then 
		                change to other implementation via a property parameter</entry>
		              </row>
		              <row>
		                <entry><code>ProxyMailSender</code></entry>
		                <entry>Makes use of multiple mail senders. It takes a list of senders 
		                and sends the message using each one in the list</entry>
		              </row>
		              <row>
		                <entry><code>JdbcMailSender</code></entry>
		                <entry>Uses JDBC to store sent messages</entry>
		              </row>
		              <row>
		                <entry><code>RepositoryMailSender</code></entry>
		                <entry>Uses Hibernate to store sent messages</entry>
		              </row>
		              <row>
		                <entry><code>SwingMailSender</code></entry>
		                <entry>Show sent messages in a swing window</entry>
		              </row>
		
		            </tbody>
		          </tgroup>
		        </informaltable>

            </section>                     
                
            <section xml:id="commons-message-implementations-mail-sending">                
            <title>Improving configuration</title>
		    <para>There are some improvements over this configuration. In the next 
		    example we will use <code>ProxyMailSender</code> to
		    make use of multiple senders since we are desiring to send the email and store 
		    its content in our database. Other good feature showed in this example is 
		    the the possibility to send emails to console at development time and, 
		    by changing a property value, we are ready to go live 
		    (making use of <code>SwitchConditionalFactoryBean</code>). 
		    In order to do this we need to change: </para>

            <programlisting>            
<![CDATA[
<!-- Notification strategy bean -->
<bean id="emailNotificationStrategy" 
    class="ar.com.zauber.commons.message.impl.mail.SimpleEmailNotificationStrategy">
    
    <!-- Sender logic class -->
	<constructor-arg index="0">
	    <!-- Proxy will take our messages and send to everyone in the list-->
	    <bean class="ar.com.zauber.commons.spring.mail.ProxyMailSender">
            <constructor-arg index="0">
                <list>
                    <ref bean="externalMailSender"/>
                    <ref bean="hibernateMailSender"/>
                </list>
            </constructor-arg>
        </bean>
    </constructor-arg>
	<!-- Sender's domain -->
	<constructor-arg index="1" value="senderdomain.com"/>
	<!-- Sender's name -->
	<constructor-arg index="2" value="$name of the sender"/>
</bean>

<bean id="hibernateMailSender" class="ar.com.zauber.commons.spring.mail.RepositoryMailSender">
    <constructor-arg index="0">
        <!-- Reference to hibernate Session Factory -->
        <ref bean="sessionFactory"/>
    </constructor-arg>
</bean>

<bean name="externalMailSender" 
        class="ar.com.zauber.commons.spring.beans.factory.SwitchConditionalFactoryBean">
     <property name="caseBlocks">
          <list>
             <bean class="ar.com.zauber.commons.spring.beans.factory.impl.BooleanPropertyCaseBlock" >
                <!-- Some property indicating true if we are at development time, to show mails on console -->
                <constructor-arg index="0" value="mail.mock"/>
                <constructor-arg index="1">
                    <bean id="mockMailSender" 
                        class="ar.com.zauber.commons.spring.mail.NullMailSender"/>
                </constructor-arg>
             </bean>
             <bean class="ar.com.zauber.commons.spring.beans.factory.impl.DefaultCaseBlock" >
                <constructor-arg index="0">
                    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
                        <!-- Mail Host -->
                        <property name="host" value="mail.host"/>
                        <!-- Mail Default Encoding -->
                        <property name="defaultEncoding" value="mail.defaultEncoding"/>
                        <!-- Mail Username -->
                        <property name="username" value="mail.username"/>
                        <!-- Mail Password -->
                        <property name="password" value="mail.password"/>
                        <!-- Mail Service Port -->
                        <property name="port" value="mail.port"/>
                        <!-- Mail Service Authentication -->
                        <property name="javaMailProperties">
                           <props>
                                <prop key="mail.smtp.starttls.enable">mail.tls</prop>
                                <prop key="mail.smtp.auth">mail.auth</prop>
                           </props>
                        </property>
                    </bean>                        
                </constructor-arg>
             </bean>
          </list>
      </property>
</bean>]]>
            </programlisting>
            </section>
       
                <section xml:id="commons-message-implementations-mail-complete">
                    <title>Complete configuration example</title>
                    <para>Here there is a complete configuration example.</para>
                    <para><emphasis role="bold">Properties file</emphasis>:</para>
                    <programlisting>
mail.mock=true
mail.host=mail.test
mail.port=25
mail.username=test
mail.password=test
mail.tls=true
mail.auth=true
mail.defaultEncoding=utf-8

mail.from.name=(Zauber Software) noreply
mail.from.domain=zaubersoftware.com
mail.replyto=noreply@zaubersoftware.com      

mail.accountVerification.subject=Welcome to Zauber Software - Account Verification              
                    </programlisting>
                    <para>Our spring message <emphasis role="bold">bean definition file</emphasis>:</para>
                    <programlisting><![CDATA[
    <bean id="emailFromAddress" 
            class="ar.com.zauber.commons.message.impl.mail.JavaMailEmailAddress">
        <constructor-arg value="${mail.replyto}" />
    </bean>

    <bean id="emailNotificationStrategy" 
            class="ar.com.zauber.commons.message.impl.mail.SimpleEmailNotificationStrategy">
        <constructor-arg index="0">
            <bean class="ar.com.zauber.commons.spring.mail.ProxyMailSender">
                <constructor-arg index="0">
                    <list>
                        <ref bean="externalMailSender"/>
                        <ref bean="hibernateMailSender"/>
                    </list>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg index="1" value="${mail.from.domain}"/>
        <constructor-arg index="2" value="${mail.from.name}"/>
    </bean>
    
    <bean id="hibernateMailSender" class="ar.com.zauber.commons.spring.mail.RepositoryMailSender">
        <constructor-arg index="0">
            <ref bean="sessionFactory"/>
        </constructor-arg>
    </bean>
    
    <bean name="messageFactory" 
            class="ar.com.zauber.commons.message.message.templates.MessageTemplateMessageFactory">
        <description>Mail templates</description>
        <constructor-arg index="0">
            <map>
               <entry key="accountVerification/mail">
                    <bean class="ar.com.zauber.commons.message.impl.message.VelocityMessageTemplate">
                        <constructor-arg index="0">
                            <bean class="ar.com.zauber.commons.dao.resources.ClasspathResource">
                                <constructor-arg index="0" value="com/project/impl/messages/accountVerification.text.vm"/>
                            </bean>
                        </constructor-arg>                            
                        <constructor-arg index="1" value="${mail.accountVerification.subject}"/>
                        <constructor-arg index="2" ref="emailFromAddress"/>
                    </bean>
               </entry>
            </map>
        </constructor-arg>
    </bean>

	<bean name="accountVerificationCommand" class="ar.com.zauber.commons.message.util.MessageControllerCommand">
	    <constructor-arg index="0" ref="emailNotificationStrategy"/>
	    <constructor-arg index="1" ref="messageFactory"/>
	    <constructor-arg index="2" value="accountVerification/mail"/>
	</bean>
    <bean name="externalMailSender" 
            class="ar.com.zauber.commons.spring.beans.factory.SwitchConditionalFactoryBean">
         <property name="caseBlocks">
              <list>
                 <bean 
                        class="ar.com.zauber.commons.spring.beans.factory.impl.BooleanPropertyCaseBlock" >
                    <constructor-arg index="0" value="${mail.mock}"/>
                    <constructor-arg index="1">
                        <bean id="mockMailSender" class="ar.com.zauber.commons.spring.mail.NullMailSender"/>
                    </constructor-arg>
                 </bean>
                 <bean 
                        class="ar.com.zauber.commons.spring.beans.factory.impl.DefaultCaseBlock" >
                    <constructor-arg index="0">
                        <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
                            <property name="host" value="${mail.host}"/>
                            <property name="defaultEncoding" value="${mail.defaultEncoding}"/>
                            <property name="username" value="${mail.username}"/>
                            <property name="password" value="${mail.password}"/>
                            <property name="port" value="${mail.port}"/>
                            <property name="javaMailProperties">
                               <props>
                                    <prop key="mail.smtp.starttls.enable">${mail.tls}</prop>
                                    <prop key="mail.smtp.auth">${mail.auth}</prop>
                               </props>
                            </property>
                        </bean>                        
                    </constructor-arg>
                 </bean>
              </list>
          </property>
    </bean>	
    <!-- Mail Notification Address Factory -->
    <bean id="notificationAddressFactory" 
        class="ar.com.zauber.commons.message.impl.mail.JavaMailEmailAddressFactory"/>    
	]]>
                    </programlisting>
                    <para><emphasis role="bold">Velocity template</emphasis>:</para>
                    <programlisting>
Hello $user.name,

You have just registered an account on zaubersoftware.com!

--
Zauber Software
www.zaubersoftware.com
                    </programlisting>
                    <para><emphasis role="bold">Code example</emphasis></para>
                    <programlisting><![CDATA[
class Foo {
    @Autowired
    NotificationAddressFactory notificationAddressFactory;
    @Autowired
    MessageControllerCommand accountVerificationCommand;
    
    void sendEmail() {
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("user.name", "John");
		accountVerificationCommand.sendMessage(
		    model, 
		    new NotificationAddress[] { 
		        notificationAddressFactory.createNotificationAddress("receiver@test.com"), 
		    });
    }
}]]>
                    </programlisting>                                      
                </section>            
            </section>
    
        <section xml:id="commons-message-implementations-jabber">
            <title>Jabber notifications</title>
            <para>After seeing a full example for email notifications, jabber 
            notifications are not very different. We only need to add an entry 
            in <code>messageFactory</code> for each notification template in our 
            jabber notificatio </para>
            
            <programlisting><![CDATA[
<entry key="observation/update">
    <bean class="ar.com.zauber.commons.xmpp.message.XMPPMessageTemplate">
        <!-- Message default context -->
        <constructor-arg index="0">
            <description>modelo: observation, date, resource</description>
            <bean class="ar.com.zauber.commons.dao.resources.ClasspathResource">
                <constructor-arg index="0" value="path/to/velocity/template.text.vm"/>
            </bean>
        </constructor-arg>
        <!-- Message subject -->
        <constructor-arg value="Crono: Observaciones del dia de hoy"/>
        <!-- Message charset -->
        <constructor-arg value="iso-8859-1"/>
    </bean>
</entry>]]>
            </programlisting>
            
        </section>
        
        <section xml:id="commons-message-implementations-multipart">
            <title>Rich Text Messages</title>
            <para>Rich Text Messages is intended to make use of 
            <link xlink:href="http://en.wikipedia.org/wiki/MIME">MIME Internet standard</link>. 
            This implementation add suport for plain or html text (Using  
            <link xlink:href="http://en.wikipedia.org/wiki/MIME#Multipart_messages">multipart messages</link>. 
            </para>
            <para><emphasis>Code example</emphasis></para>
            <programlisting><![CDATA[
final PartTemplate templatePlain = new VelocityMessagePartTemplate(
        "text/plain", new StringResource("hey! $you"));
final PartTemplate templateHtml = new VelocityMessagePartTemplate(
        "text/html", new StringResource("<html><h1>hey!</h1> "
                + "<h2>$you</h2></html>"));
final MessageTemplate template = new MultipartMessageTemplate(
        Arrays.asList(new PartTemplate[]{templatePlain, templateHtml}), 
        "hi me", address);

final Map<String, Object> model = new HashMap<String, Object>();
model.put("you", "you");

final MultipartMessage msg = (MultipartMessage) template.render(model);
final MessagePart partPlain = msg.getPart("text/plain");
final MessagePart partHtml = msg.getPart("text/html");
final MessagePart partOther = msg.getPart("text/other");
assertNotNull(partPlain);
assertNotNull(partHtml);
assertNull(partOther);
assertEquals("hey! you", msg.getContent());
assertEquals("hey! you", partPlain.getContent());
assertEquals("<html><h1>hey!</h1> <h2>you</h2></html>", 
        partHtml.getContent());
assertEquals("hi me", msg.getSubject());]]>
            </programlisting>
        </section>
        
        <section xml:id="commons-message-implementations-null">
            <title>Null Messages</title>
            <para>In order to start using message, it would be useful to understand its entities. </para>
        </section>
        
        <section xml:id="commons-message-implementations-limitations">
            <title>Limitations</title>
            <itemizedlist>
            <listitem><para><emphasis role="bold">Bounces</emphasis>: 
            Handling for messages that failed to be delivered.</para>
            </listitem>
            <listitem><para><emphasis role="bold">Templating for subjects</emphasis>: 
            Posibility to have a subject template.</para>
            </listitem>            
            <listitem><para><emphasis role="bold">Hibernate</emphasis>: 
            Lack of <code>MailSender</code> for Hibernate without using 
            repository.</para>
            </listitem>            
            <listitem><para><emphasis role="bold">Multipart Messages</emphasis>: 
            No support for inline resources like images, css, etc.</para>
            </listitem>            

            </itemizedlist>
        </section>        
        
    </section>
    
    
</chapter>
