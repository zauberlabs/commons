<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter xml:id="commons-persistence" 
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns="http://docbook.org/ns/docbook">
    <title>Commons Persistence</title>
    
    <section xml:id="commons-persistence-overview">
        <title>Overview</title>
         <para><emphasis role="bold">Commons Persistence</emphasis> is an abstract layer upon the data base and the domain model. If you're using an ORM, It aims to be upon it too making the application independent from the ORM used and each of their particular characteristics. What's more, its main purpose is to lower the data access complexity.</para>
        <para>Commons Persistence can be divided in:
        </para>
        <itemizedlist>
            <listitem><para><emphasis role="bold">Api:
            </emphasis>Uselful interfaces when persisting an object.</para></listitem>    
	    <listitem><para><emphasis role="bold">Closures:
            </emphasis>Handling transactions by themselves executing a closure in between</para></listitem>
	    <listitem><para><emphasis role="bold">Interceptors:
            </emphasis>Adding functionality to the Spring existents like logging</para></listitem>
	    <listitem><para><emphasis role="bold">Utils:
            </emphasis>Utility persistence classes</para></listitem>
        </itemizedlist>          
    </section>
        
    <!-- Herramientas que tienen que ver con la persistencia -->

    <!-- Mencionar common auth : wrapper por ej, para spring acegi , me brinda
    la posibilidad de manejar genericamente los usuarios -->

    <!-- Interceptores relacionados con hibernate -->

    <!-- 
    Clases de la api
    Nameable = objeto nombrable [getName]
    CreationAuditable = Provee auditoria para la creacion
    Identifiable = objeto identificable [getId]
    LogicallyDeleteable = Objecto que puede ser dado de baja logicamente
    Modifiable = Maneja versionado de un objeto que es mutable
    ModificationAuditable = Provee auditoria para la modificacion
     -->
<section xml:id="commons-persistence-api">
	<title>Api</title>

	<section xml:id="commons-persistence-api-identifible">
		<title>Identifiable</title>
<para><code>Identifiable</code> represents a persistent object identified by a primary key. Here is the simple API it provides. You can implement the id as you wish.</para>
<programlisting language="Java">public interface Identifiable {
    
    /** @return el identificador, or null if it is transient.  */
    Serializable getId();
}</programlisting>
	</section>
<section xml:id="commons-persistence-api-nameable">
		<title>Nameable</title>
<para><code>Nameable</code> represents a persistent object with id and name.</para>
<programlisting language="Java">public interface Nameable extends Identifiable {
    /** @return entity name */
    String getName();
}</programlisting>
	</section>
	<section xml:id="commons-persistence-api-creationauditable">
		<title>Creation Auditable</title>
<para><code>Creation Auditable</code> must be implemented by those entities that require creation audit</para>
<programlisting language="Java">public interface CreationAuditable {

    /**
     * @return responsable for the object creation 
     */
    String getCreatedBy();
    
    /**
     * @return date when the object was created
     */
    Date getCreatedAt();
    
}
</programlisting>
	</section>
<section xml:id="commons-persistence-api-modifiable">
		<title>Modifiable</title>
<para><code>Modifiable</code> must be implemented by entities that can be modified, it defines the object version.</para>
<programlisting language="Java">public interface Modifiable {

    /**
     * @return object version
     */
    Long getVersion();
    
    /**
     * @param object version
     */
    void setVersion(Long version);
    
}
</programlisting>
	</section>
<section xml:id="commons-persistence-api-modifiable-auditable">
		<title>Modification Auditable</title>
<para><code>Modification Auditable</code> must be implemented by entities that require modification audit.</para>
<programlisting language="Java">public interface ModificationAuditable extends Modifiable {

    /**
     * @return responsable for last modification
     */
    String getModifiedBy();
    
    /**
     * @return when the object was last modified 
     */
    Date getModifiedAt();
        
}
</programlisting>
	</section>
<section xml:id="commons-persistence-api-logically-deleted">
		<title>Logically Deleteable</title>
<para><code>Logically Deleteable</code> must be implemented by entities that can be logically deleted</para>
<programlisting language="Java">public interface LogicallyDeleteable {
    
    /** set if the object is logically deleted */
    void setLogicallyDeleted(boolean logicallyDeleted);
    
    /** @return true if the object is logically deleted  */
    boolean isLogicallyDeleted(); 
    
}
</programlisting>
	</section>

</section>
    
    <!--**Closures -> Tienen que ver con el Open Session in view
    Donde spring abre la sesion (cuando le llega el request mediante un interceptor
    y dps la cierra)
    
    Ver clase OpenEntityManagerInViewFilter de springframework
    
    En este caso se aplica la misma logica que usa spring para poder usar en otros
    contextos (mediante un closure o soporte para runnables)
    
    OpenEntityManagerClosure
    OpenEntityManagerRunnable
    OpenSessionClosure
    -->
<section xml:id="commons-persistence-closures">
	<title>Closures</title>
	<para>We've implemented some clases to wrap any piece of code execution between a transaction as the Spring <code>OpenSessionInViewFilter</code> does.</para>
 <itemizedlist>
        <listitem>
	<para><emphasis role="bold"><code>OpenEntityManagerClosure:</code></emphasis> receives the <code>EntityManagerFactory</code> that will create the <code>EntityManager</code> to operate with, the <code>Closure</code> to execute between the transaction and a dryrun parameter that indicates whether to manage a new transaction or just execute the closure without any new context (this is typically the case of test context which already provides a transaction management itself):</para>
<programlisting language="Java">public OpenEntityManagerClosure(final EntityManagerFactory emf,
            final Closure&lt;T&gt; target, final boolean dryrun);
</programlisting>
</listitem> 
<listitem>
<para><emphasis role="bold"><code>OpenEntityManagerRunnable:</code></emphasis> uses the <code>OpenEntityManagerClosure</code> but executes a new thread instead of any other <code>Closure</code>. Does not provide a way to do dryrun:</para>
<programlisting language="Java">public OpenEntityManagerRunnable(final EntityManagerFactory emf,
            final Runnable target);
</programlisting>
</listitem> 
<listitem>
<para><emphasis role="bold"><code>OpenSessionClosure:</code></emphasis> is exactly like <code>OpenEntityManagerClosure</code> but instead of using the <code>EntityManager</code>, works directly with <code>Hibernate Session</code>:</para>
<programlisting language="Java">public OpenSessionClosure(final SessionFactory sessionFactory,
            final Closure&lt;T&gt; target, final boolean dryrun);
</programlisting>
	</listitem>
        </itemizedlist>
</section>

    <!--**Utils -> 

    ConfigurableHibernatePersistence -> recibe un interceptor

    MockHibernateAuditLogger -> para entornos de testing
    
    HibernateAuditLoggerInterceptor -> fijarse  los metodos que implementan
    para ver donde se cuelga cada uno
    SpringInjectionHibernateAuditLoggerInterceptor
    SpringInjectionInterceptor
    
    chequear el ultimo mail de juan de los interceptors... se habla de esto
    https://wiki.zaubersoftware.com/intra/bin/view/Commons/ReleasesNotes3Punto35
    https://wiki.zaubersoftware.com/intra/bin/view/Commons/AboutRepository
     -->

<section xml:id="commons-persistence-interceptors">
<title>Interceptors</title>
<section xml:id="commons-persistence-interceptors-loggers">
<title>Loggers</title>
<para>We provide some interceptors that act as loggers in important operations such as save, load spring context, etc.</para>
<table frame='hsides'>
                    <title>Logger Interceptor Implementations</title>
                
                    <tgroup cols="2">
                        <thead>
                            <row>
                                <entry align="center">Name</entry>
                                <entry align="center">Description</entry>
                            </row>
                        </thead>

                        <tbody>
                            <row>
                                <entry>
                                    <code>HibernateAuditLoggerInterceptor</code>
                                </entry>
                                <entry>Logs save operations and when an object is detected to be dirty, during a flush</entry>
                            </row>
                            <row>
                                <entry>
                                    <code>SpringInjectionHibernateAuditLoggerInterceptor</code>
                                </entry>
                                <entry>Logs onLoad operations, called just before an object is initialized.</entry>
                            </row>
                            <row>
                                <entry>
                                    <code>MockHibernateAuditLogger</code>
                                </entry>
                                <entry>Was intended for testing environment but right now is deprecated, you should use directly Hibernate <code>EmptyInterceptor</code></entry>
                            </row>
                                                   
                        </tbody>
                    </tgroup>
                </table>                
</section>
<section xml:id="commons-persistence-interceptors-injection">
<title>Spring Injection</title>
<para><code>SpringInjectionInterceptor</code> lets you inject dependencies from a spring context to achieve a Domain Driven Design. So if you have to inject an entity from your domain model which needs other domain model dependencies in the context, using this interceptor is the solution. Here's and example on how you should declare your class model in order to achieve the injection. The classes wishing being injected with this interceptor, must be annotated with the annotation <code>{@link Configurable}</code>. And each field that will be injected must be transient and annotated with <code>{@link Qualifier}</code>. The qualifier name can be used to set the bean name (else it uses the field name)</para>
<programlisting language="Java">@Entity
@Configurable
public class DomainEntityExample implements Persistible {
     @Id
     private Long id;
      
     @Qualifier(value = "someService")
     private transient SomeService service;
     @Qualifier
     private transient SomeService someService;
    
     public final SomeService getService() {
         return service;
     }
     public final SomeService getSomeService() {
         return someService;
     }
     ....
}
</programlisting>
</section>
<section xml:id="commons-persistence-interceptors-configurable">
<title>Configurating Hibernate Persistence</title>
<para>In order to use the above interceptors you'll need a new configuration persistence entity to inject them in the context. This is why we created <code>ConfigurableHibernatePersistence</code> that receives any interceptor as a property set and injects it as post process configuration.</para>
<programlisting language="Java">public final void setInterceptor(final Interceptor interceptor) {
        this.interceptor = interceptor;
}
</programlisting>
</section>
</section>

    <!-- 
    Clases de utils
    ScrollableResultsIterator
    AnonymousAuthenticationUserMapper
    URIUserType
    -->
<section xml:id="commons-persistence-utils">
	<title>Utils</title>
	<para>We introduce some utils classes related to object persistence:</para>

        <itemizedlist>
            <listitem><para><emphasis role="bold"><code>ScrollableResultIterator:</code>
            </emphasis>an iterator that works with Hibernate <code>ScrollableResult</code>.</para>
<itemizedlist>
<listitem>
<para><code>next</code> returns the actual element and advances next element after that to prepare the following actual element (the constructor initializes the actual element with the first in ScrollableResult). It evicts from Hibernate session the next element to return at the following next if there's any. If there're no more elements, method next assigns the actual element null and in the following called returns <code>NoSuchElementException</code>.</para>
</listitem>
<listitem>
<para><code>hasNext</code> returns whether the actual element poped out from the ScrollableResult is null. </para>
</listitem>
<listitem>
<para><code>remove</code> is not implemented by now.</para>
</listitem>
</itemizedlist>
	    </listitem>
<listitem><para><emphasis role="bold"><code>AnonymousAuthenticationUserMapper:</code></emphasis> does not depend from commons-auth, so users are not managed by Acegi. Therefore, It's used for testing and batch context where there's no need to have users. It has no roles, anonymous is set to false and it only sets the name passed as a parameter when the entity is created.</para>
	    </listitem>
<listitem><para><emphasis role="bold"><code>URIUserType: </code></emphasis> knows how to serialize URI's as text columns. You only have to specify this when you map the uri with Hibernate. Here's an example of declaration:</para>
<programlisting language="Java">@Entity
@Table(name = "RESTAURANTS")
public class Restaurant {
    @Id
    @GeneratedValue(generator = "GC_SEQ_RESTAURANTS")
    @SequenceGenerator(name = "GC_SEQ_RESTAURANTS", 
               sequenceName = "GC_SEQ_RESTAURANTS")
    @Column(nullable = false, name = "RESTAURANTS_ID")
    private Long id;
    
    @Column(nullable = false, updatable = true, name = "RESTAURANTS_NAME")
    private String name;

    @Column(nullable = false, name = "RESTAURANTS_URI")
    @Type(type = "ar.com.zauber.commons.repository.utils.URIUserType")
    private URI webpage;
    
    ...
}
</programlisting>
	    </listitem>         
        </itemizedlist>
    
</section>
</chapter>
